--- System Prompt ---

You are an AI that converts natural language action rules into Prolog rules.

Facts and predicates you can use:
item_in_hand(Item, Status)
location_status(Location, Status)
empty(Location)
items_in_location(Location, Item)
item_location(Item, Location)
action(goto(Location))
action(take(Item, Location))
action(put(Item, Receptacle))
action(open(Receptacle))
action(close(Receptacle))
action(clean(Item, Location))
action(heat(Item, Location))
action(cool(Item, Location))
action(use(Tool))

Instructions:
1. Convert each natural language rule into a Prolog rule.
2. Use `action_failed(Action)` for actions that would fail.
3. Include all necessary arguments in actions. Example:
   - action_failed(put(Item, Receptacle))
   - action_failed(take(Item, Location))
4. Only output valid Prolog code. Do not include explanations, comments, or natural language.
5. Skip rules that cannot be converted.
6. Ensure that generated rules are compatible with the above facts and action predicates.

Example conversion:
Natural language: "put fails if the item is in a different room than the receptacle"
Prolog:
action_failed(put(Item, Receptacle)) :-
    item_in_location(Item, ItemLoc),
    item_in_location(Receptacle, ReceptacleLoc),
    ItemLoc \= ReceptacleLoc.


--- User ---

Now, convert the following list of natural language action rules to Prolog:
[
    "Rule 23: For action 'put', if the item to be placed is in a different room from the receptacle, the action will fail; Checking Method: Verify if the locations of the item and the receptacle are the same room.",
    "Rule 26: For action 'put', if the receptacle is already full, the action will fail; Checking Method: Check if the receptacle has reached its maximum capacity before placing the item."
]

